{"version":3,"sources":["gl.ts","components/cell.tsx","components/line.tsx","components/table.tsx","index.tsx"],"names":["cubeRotation","GL","context","programInfo","buffers","this","calculateImageData","time","gl","deltaTime","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","fieldOfView","Math","PI","can","canvas","aspect","clientWidth","clientHeight","projectionMatrix","mat4","create","perspective","modelViewMatrix","translate","zSpeed","xSpeed","ySpeed","rotate","type","FLOAT","bindBuffer","ARRAY_BUFFER","position","vPos","attribLocations","vertexPosition","vertexAttribPointer","enableVertexAttribArray","color","vCol","vertexColor","ELEMENT_ARRAY_BUFFER","indices","useProgram","program","pMatrix","uniformLocations","uniformMatrix4fv","mvMatrix","UNSIGNED_SHORT","drawElements","TRIANGLES","drawScene","pixels","Uint8Array","drawingBufferWidth","drawingBufferHeight","readPixels","RGBA","UNSIGNED_BYTE","getImageData","componentToHex","c","hex","undefined","toString","length","loadShader","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","deleteShader","Cell","props","dataIndex","y","w","x","cssColor","r","g","b","rgbToHex","imageData","text","random","substring","style","background","className","Line","id","_","range","width","map","key","h","getContext","initWebGL","document","createElement","height","getElementsByTagName","appendChild","createCanvas","shaderProgram","getAttribLocation","getUniformLocation","createProgramInfo","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","positionBuffer","createBuffer","positions","flatten","bufferData","Float32Array","STATIC_DRAW","colors","faceColors","reduce","acc","concat","createColors","colorBuffer","indexBuffer","Uint16Array","initBuffers","initGl","Table","React","setImageData","queuedFrame","frame","requestAnimationFrame","cancelAnimationFrame","useAnimation","ReactDOM","querySelector"],"mappings":"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","file":"static/js/main.d7568c23.chunk.js","sourcesContent":["import _ from 'underscore'\r\nimport { mat4 } from 'gl-matrix'\r\n\r\nvar cubeRotation = 0.0\r\n\r\nclass AttribLocations {\r\n    vertexPosition: GLint\r\n    vertexColor: GLint\r\n    constructor(vertexPosition: GLint, vertexColor: GLint) {\r\n        this.vertexPosition = vertexPosition\r\n        this.vertexColor = vertexColor\r\n    }\r\n}\r\n\r\nclass UniformLocations {\r\n    projectionMatrix: WebGLUniformLocation\r\n    modelViewMatrix: WebGLUniformLocation\r\n    constructor(projectionMatrix: WebGLUniformLocation, modelViewMatrix: WebGLUniformLocation) {\r\n        this.projectionMatrix = projectionMatrix\r\n        this.modelViewMatrix = modelViewMatrix\r\n    }\r\n}\r\n\r\nclass ProgramInfo {\r\n    program: WebGLProgram\r\n    attribLocations: AttribLocations\r\n    uniformLocations: UniformLocations\r\n    constructor(program: WebGLProgram, attribLocations: AttribLocations, uniformLocations: UniformLocations) {\r\n        this.program = program\r\n        this.attribLocations = attribLocations\r\n        this.uniformLocations = uniformLocations\r\n    }\r\n}\r\n\r\nclass Buffers {\r\n    position: WebGLBuffer\r\n    color: WebGLBuffer\r\n    indices: WebGLBuffer\r\n    constructor(position: string, color: WebGLBuffer, indices: WebGLBuffer) {\r\n        this.position = position\r\n        this.color = color\r\n        this.indices = indices\r\n    }\r\n}\r\n\r\nclass GL {\r\n    context: WebGLRenderingContext\r\n    programInfo: ProgramInfo\r\n    buffers: Buffers\r\n    constructor(context: WebGLRenderingContext, programInfo: ProgramInfo, buffers: Buffers) {\r\n        this.context = context\r\n        this.programInfo = programInfo\r\n        this.buffers = buffers\r\n    }\r\n}\r\n\r\nfunction initGl(w: number, h: number): GL {\r\n    const canvas = createCanvas(w, h)\r\n    const gl = initWebGL(canvas)\r\n    const shaderProgram = initShaderProgram(gl)\r\n    const programInfo = createProgramInfo(shaderProgram, gl)\r\n    const buffers = initBuffers(gl)\r\n    return new GL(gl, programInfo, buffers)\r\n}\r\n\r\nfunction calculateImageData(time: number, gl: GL): Uint8Array {\r\n    drawScene(gl.context, gl.programInfo, gl.buffers, time * 0.00001)\r\n    const imageData = getImageData(gl.context)\r\n    return imageData\r\n}\r\n\r\nfunction initWebGL(canvas: HTMLCanvasElement): WebGLRenderingContext {\r\n    const gl = (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\")) as WebGLRenderingContext\r\n    if (!gl) {\r\n        alert(\"Can not initialize WebGL.\")\r\n    }\r\n    return gl\r\n}\r\n\r\nfunction createCanvas(w: number, h: number): HTMLCanvasElement {\r\n    const canvas = document.createElement(\"canvas\") as HTMLCanvasElement\r\n    canvas.id = \"canvas\"\r\n    canvas.width = w\r\n    canvas.height = h\r\n    document.getElementsByTagName(\"body\")[0].appendChild(canvas)\r\n    return canvas\r\n}\r\n\r\nfunction createProgramInfo(shaderProgram: WebGLProgram, gl: WebGLRenderingContext): ProgramInfo {\r\n    return {\r\n        program: shaderProgram,\r\n        attribLocations: {\r\n            vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\r\n            vertexColor: gl.getAttribLocation(shaderProgram, \"aVertexColor\")\r\n        },\r\n        uniformLocations: {\r\n            projectionMatrix: gl.getUniformLocation(shaderProgram, \"uProjectionMatrix\") as WebGLUniformLocation,\r\n            modelViewMatrix: gl.getUniformLocation(shaderProgram, \"uModelViewMatrix\") as WebGLUniformLocation\r\n        }\r\n    }\r\n}\r\n\r\nfunction componentToHex(c: number): string {\r\n    const hex = c === undefined ? \"00\" : c.toString(16)\r\n    return hex.length === 1 ? \"0\" + hex : hex\r\n}\r\n\r\nfunction rgbToHex(r: number, g: number, b: number): string {\r\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b)\r\n}\r\n\r\nfunction getImageData(gl: WebGLRenderingContext): Uint8Array {\r\n    const pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4)\r\n    gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixels)\r\n    return pixels\r\n}\r\n\r\nfunction cubePositions(): number[] {\r\n    const front = [-1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0]\r\n    const back = [-1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0]\r\n    const top = [-1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0]\r\n    const bottom = [-1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0]\r\n    const right = [1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0]\r\n    const left = [-1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0]\r\n    const faces = _.flatten([front, back, top, bottom, right, left])\r\n    return faces\r\n}\r\n\r\nfunction cubeColors(): number[][] {\r\n    const purple = [163 / 255, 73 / 255, 164 / 255, 1.0] //#A349A4\r\n    const yellow = [255 / 255, 242 / 255, 0 / 255, 1.0] //#FFF200\r\n    const red = [237 / 255, 28 / 255, 36 / 255, 1.0] //#ED1C24\r\n    const blue = [63 / 255, 72 / 255, 204 / 255, 1.0] //#3F48CC\r\n    const orange = [255 / 255, 127 / 255, 39 / 255, 1.0] //#FF7F27\r\n    const green = [34 / 255, 177 / 255, 76 / 255, 1.0] //#22B14C\r\n    return [purple, yellow, red, blue, orange, green]\r\n}\r\n\r\nfunction cubeIndices(): number[] {\r\n    const front = [0, 1, 2, 0, 2, 3]\r\n    const back = [4, 5, 6, 4, 6, 7]\r\n    const top = [8, 9, 10, 8, 10, 11]\r\n    const bottom = [12, 13, 14, 12, 14, 15]\r\n    const right = [16, 17, 18, 16, 18, 19]\r\n    const left = [20, 21, 22, 20, 22, 23]\r\n    const trianglePairs = _.flatten([front, back, top, bottom, right, left])\r\n    return trianglePairs\r\n}\r\n\r\nfunction createColors(faceColors: number[][]) {\r\n    return faceColors.reduce((acc, c) => acc.concat(c, c, c, c), [])\r\n}\r\n\r\nfunction initBuffers(gl: WebGLRenderingContext): Buffers {\r\n    const positionBuffer = gl.createBuffer() as WebGLBuffer\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n    const positions = cubePositions()\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\r\n    const faceColors = cubeColors()\r\n    const colors = createColors(faceColors)\r\n    const colorBuffer = gl.createBuffer() as WebGLBuffer\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer)\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n    const indexBuffer = gl.createBuffer() as WebGLBuffer\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\r\n    const indices = cubeIndices()\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW)\r\n    return { position: positionBuffer, color: colorBuffer, indices: indexBuffer }\r\n}\r\n\r\nfunction drawScene(gl: WebGLRenderingContext, programInfo: ProgramInfo, buffers: Buffers, deltaTime: number) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0) //full black\r\n    gl.clearDepth(1.0) //clear everything\r\n    gl.enable(gl.DEPTH_TEST)\r\n    gl.depthFunc(gl.LEQUAL) //near things obscure far things\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n    const fieldOfView = 45 * Math.PI / 180 //radians\r\n    const can = gl.canvas as HTMLCanvasElement\r\n    const aspect = can.clientWidth / can.clientHeight\r\n    const zNear = 0.1 //min distance\r\n    const zFar = 100.0 //max distance\r\n\r\n    //note: glmatrix.js always has the first argument as the destination to receive the result.\r\n    const projectionMatrix = mat4.create()\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar)\r\n    const modelViewMatrix = mat4.create() //start in center\r\n    mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -5.0])\r\n    const zSpeed = cubeRotation\r\n    const xSpeed = cubeRotation * 0.618\r\n    const ySpeed = cubeRotation * -1.618\r\n    mat4.rotate(modelViewMatrix, modelViewMatrix, zSpeed, [0, 0, 1])\r\n    mat4.rotate(modelViewMatrix, modelViewMatrix, xSpeed, [0, 1, 0])\r\n    mat4.rotate(modelViewMatrix, modelViewMatrix, ySpeed, [1, 0, 0])\r\n    {\r\n        const numComponents = 3\r\n        const type = gl.FLOAT\r\n        const normalize = false\r\n        const stride = 0\r\n        const offset = 0\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position)\r\n        const vPos = programInfo.attribLocations.vertexPosition\r\n        gl.vertexAttribPointer(vPos, numComponents, type, normalize, stride, offset)\r\n        gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition)\r\n    }\r\n    {\r\n        const numComponents = 4\r\n        const type = gl.FLOAT\r\n        const normalize = false\r\n        const stride = 0\r\n        const offset = 0\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color)\r\n        const vCol = programInfo.attribLocations.vertexColor\r\n        gl.vertexAttribPointer(vCol, numComponents, type, normalize, stride, offset)\r\n        gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor)\r\n    }\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices)\r\n    gl.useProgram(programInfo.program)\r\n    const pMatrix = programInfo.uniformLocations.projectionMatrix;\r\n    gl.uniformMatrix4fv(pMatrix, false, projectionMatrix)\r\n    const mvMatrix = programInfo.uniformLocations.modelViewMatrix\r\n    gl.uniformMatrix4fv(mvMatrix, false, modelViewMatrix)\r\n    {\r\n        const vertexCount = 36\r\n        const type = gl.UNSIGNED_SHORT\r\n        const offset = 0\r\n        gl.drawElements(gl.TRIANGLES, vertexCount, type, offset)\r\n    }\r\n    cubeRotation += deltaTime\r\n}\r\n\r\nfunction initShaderProgram(gl: WebGLRenderingContext): WebGLProgram {\r\n    const vsSource = vertexShaderSource()\r\n    const fsSource = fragmentShaderSource()\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\r\n    const shaderProgram = gl.createProgram() as WebGLProgram\r\n    gl.attachShader(shaderProgram, vertexShader)\r\n    gl.attachShader(shaderProgram, fragmentShader)\r\n    gl.linkProgram(shaderProgram)\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        alert(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(shaderProgram))\r\n    }\r\n    return shaderProgram\r\n}\r\n\r\nfunction loadShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader {\r\n    const shader = gl.createShader(type) as WebGLShader\r\n    gl.shaderSource(shader, source)\r\n    gl.compileShader(shader)\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        alert(\"An error occurred while compiling a shader: \" + gl.getShaderInfoLog(shader))\r\n        gl.deleteShader(shader)\r\n    }\r\n    return shader\r\n}\r\n\r\nfunction vertexShaderSource(): string {\r\n    return `attribute vec4 aVertexPosition; attribute vec4 aVertexColor;\r\n            uniform mat4 uModelViewMatrix; uniform mat4 uProjectionMatrix;\r\n            varying lowp vec4 vColor;\r\n            void main(void) {\r\n                gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n                vColor = aVertexColor;\r\n            }`\r\n}\r\n\r\nfunction fragmentShaderSource(): string {\r\n    return `varying lowp vec4 vColor; void main(void) { gl_FragColor = vColor; }`\r\n}\r\n\r\nexport { GL, initGl, calculateImageData, rgbToHex }\r\n","import * as React from 'react';\r\nimport { rgbToHex } from '../gl'\r\n\r\ninterface CellProps { key: String, imageData: Uint8Array, x: number; y: number; w: number }\r\n\r\nfunction Cell(props: CellProps) {\r\n    const dataIndex = (props.y * props.w * 4) + (props.x * 4)\r\n    const r = props.imageData[dataIndex]\r\n    const g = props.imageData[dataIndex + 1]\r\n    const b = props.imageData[dataIndex + 2]\r\n    //const a = props.imageData[dataIndex + 3]\r\n    const cssColor = rgbToHex(r, g, b)\r\n    const text = cssColor !== \"#000000\" ? Math.random().toString(36).substring(7, 9) : \"__\"\r\n    return (<span style={{ background: cssColor }} className={\"CELL:\" + props.x + \":\" + props.y}>{text}</span>)\r\n}\r\n\r\nexport default Cell\r\n","import * as React from 'react'\r\nimport _ from 'underscore'\r\nimport Cell from './cell'\r\n\r\ninterface LineProps { key: String, imageData: Uint8Array, y: number; width: number }\r\ntype Render<T> = (props: T) => JSX.Element\r\n\r\nconst Line: Render<LineProps> = props =>\r\n    <div id={\"LINE:\" + props.y}>\r\n        {_.range(0, props.width).map((_, x: number) =>\r\n            <Cell key={x + \":\" + props.y} imageData={props.imageData} x={x} y={props.y} w={props.width} />\r\n        )}\r\n    </div>\r\n\r\nexport default Line\r\n","import * as React from 'react'\r\nimport _ from 'underscore'\r\nimport Line from './line'\r\nimport { GL, initGl, calculateImageData } from '../gl'\r\n\r\nconst width = 50\r\nconst height = 50\r\nconst speed = 5000\r\nconst gl: GL = initGl(width, height)\r\n\r\nconst Table = () => {\r\n    const [imageData, setImageData] = React.useState(new Uint8Array())   \r\n    useAnimation(setImageData)\r\n    return (<div>\r\n        {_.range(0, height).map((_, y: number) => \r\n            <Line key={y.toString()} imageData={imageData} y={y} width={width} />\r\n        )}\r\n    </div>)\r\n}\r\n\r\nfunction useAnimation(setImageData: React.Dispatch<React.SetStateAction<Uint8Array>>) {\r\n    React.useEffect(() => {\r\n        let queuedFrame: number\r\n        const frame = () => {\r\n            setImageData(calculateImageData(speed, gl))\r\n            queuedFrame = requestAnimationFrame(frame)\r\n        }\r\n        frame()\r\n        return () => cancelAnimationFrame(queuedFrame)\r\n    }, [setImageData])\r\n}\r\n\r\nexport default Table\r\n","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport Table from './components/table'\r\nimport './index.css'\r\n\r\nconst App = () => (<div><Table /></div>)\r\nReactDOM.render(App(), document.querySelector('#root'))\r\n"],"sourceRoot":""}